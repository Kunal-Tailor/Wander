<% layout("/layouts/boilerplate.ejs")%>
<div class="row mt-3">
  <div class="col-8 offset-2">
    <h3><%= listing.title %></h3>
  </div>

  <div class="card col-6 offset-3 show-card listing-card">
    <img
      src="<%= listing.image.url %>"
      class="card-img-top show-img"
      alt="listing_image"
    />
    <div class="card-body">
      <p class="card-text"><i>Owned By: <%= listing.owner.username %></i></p>
      <p class="card-text"><%= listing.description %></p>
      <p class="card-text">
        Price: â‚¹ <%= listing.price.toLocaleString("en-IN") %>
      </p>
      <p class="card-text">Location: <%= listing.location %></p>
      <p class="card-text">Country: <%= listing.country %></p>
    </div>
  

  <% if (currUser && currUser._id.equals(listing.owner._id)) { %>
  <div class="btns mt-3">
    <a
      href="/listings/<%= listing._id %>/edit"
      class="btn btn-dark col-1 offset-3"
      >Edit</a
    >

    <form
      method="POST"
      action="/listings/<%=listing._id%>?_method=DELETE"
      class="d-inline"
    >
      <button class="btn btn-dark">Delete</button>
    </form>
  </div>
  <% } %>
  <hr />
</div>

  

  
  <div class="col-8 offset-2 mb-3">
    <% if (currUser) { %>
    <h4>Leave a Review</h4>
    <form
      action="/listings/<%= listing._id %>/reviews"
      method="POST"
      novalidate
      class="needs-validation"
    >
      <div class="mb-3 mt-3">
        <label for="rating" class="form-label">Rating</label>
        <input
          type="range"
          min="1"
          max="5"
          id="rating"
          name="review[rating]"
          class="form-range"
        />
      </div>
      <div class="mb-3">
        <label for="comment" class="form-label">Comments</label>
        <textarea
          name="review[comment]"
          id="comment"
          cols="30"
          rows="5"
          class="form-control"
          required
        ></textarea>
        <div class="invalid-feedback">Please add some comments for review</div>
      </div>
      <button class="btn btn-outline-dark">Submit</button>
    </form>
    <hr />
    <% } %> <% if(listing.reviews.length > 0) { %>
    <div class="row">
      <p class="col-8 offset-2"><b>All Reviews</b></p>
      <% for (let review of listing.reviews) { %>
      <div class="card col-5 ms-3 mb-3">
        <div class="card-body">
          <% if (review.author) { %>
          <h5 class="card-title">@<%= review.author.username %></h5>
          <% } else { %>
          <h5 class="card-title">@Anonymous</h5>
          <% } %>
          <p
            class="starability-result card-text"
            data-rating="<%= review.rating %>"
          ></p>
          <p class="card-text"><%= review.comment %></p>

          <% if (currUser && currUser._id.equals(review.author?._id)) { %>
          <form
            method="POST"
            action="/listings/<%= listing._id %>/reviews/<%= review._id %>?_method=DELETE"
            class="mb-3"
          >
            <button class="btn btn-sm btn-dark">Delete</button>
          </form>
          <% } %>
        </div>
      </div>
      <% } %>
    </div>
    <% } %>
  </div>

  <div class="col-6 offset-2 mb-3">
    <h3>Where you'll be</h3>
    <div id="map"></div>
  </div>
</div>
<script>
  let mapToken = "<%=process.env.MAP_TOKEN%>";
  ((g) => {
    var h,
      a,
      k,
      p = "The Google Maps JavaScript API",
      c = "google",
      l = "importLibrary",
      q = "__ib__",
      m = document,
      b = window;
    b = b[c] || (b[c] = {});
    var d = b.maps || (b.maps = {}),
      r = new Set(),
      e = new URLSearchParams(),
      u = () =>
        h ||
        (h = new Promise(async (f, n) => {
          await (a = m.createElement("script"));
          e.set("libraries", [...r] + "");
          for (k in g)
            e.set(
              k.replace(/[A-Z]/g, (t) => "_" + t[0].toLowerCase()),
              g[k]
            );
          e.set("callback", c + ".maps." + q);
          a.src = `https://maps.${c}apis.com/maps/api/js?` + e;
          d[q] = f;
          a.onerror = () => (h = n(Error(p + " could not load.")));
          a.nonce = m.querySelector("script[nonce]")?.nonce || "";
          m.head.append(a);
        }));
    d[l]
      ? console.warn(p + " only loads once. Ignoring:", g)
      : (d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)));
  })({ key: "AIzaSyBCS_ixpuWdO2OXo5SYbFgWUK2gBGqgiEk", v: "weekly" });
</script>

<script>
  // Initialize and add the map
  let map;

  async function initMap() {
    // The location of Uluru
    const position = { lat: 28.36, lng: 77.12 };
    // Request needed libraries.
    //@ts-ignore
    const { Map } = await google.maps.importLibrary("maps");
    const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

    // The map, centered at Uluru
    map = new Map(document.getElementById("map"), {
      zoom: 4,
      center: position,
      mapId: "DEMO_MAP_ID",
    });

    // The marker, positioned at Uluru
    const marker = new AdvancedMarkerElement({
      map: map,
      position: position,
      title: "Uluru",
    });
  }

  initMap();
</script>
